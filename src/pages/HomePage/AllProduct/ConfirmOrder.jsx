import { useParams, useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";

import { useState, useEffect } from "react";
import useAuth from "../../../Hooks/useAuth";
import { toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import bkashIcon from '../../../assets/Model/bkash.jpeg';
import NagadIcon from '../../../assets/Model/nagad.jpeg';
import {
    FaPlus,
    FaMinus,
    FaMobileAlt,
    FaExchangeAlt,
    FaMapMarkerAlt,
    FaRegCopy,
    FaMoneyCheckAlt,
    FaUser,
    FaEnvelope,
} from "react-icons/fa";
import useAxiosSecure from "../../../Hooks/useAxiosSecure";
import axios from "axios";

const districts = [ /* ‡¶ú‡ßá‡¶≤‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü */ "Bagerhat", "Bandarban", "Barguna", "Barisal", "Bhola", "Bogra", "Brahmanbaria",
    "Chandpur", "Chattogram", "Chuadanga", "Comilla", "Cox‚Äôs Bazar", "Dhaka", "Dinajpur", "Faridpur", "Feni",
    "Gaibandha", "Gazipur", "Gopalganj", "Habiganj", "Jamalpur", "Jashore", "Jhalokati", "Jhenaidah", "Joypurhat",
    "Khagrachari", "Khulna", "Kishoreganj", "Kurigram", "Kushtia", "Lakshmipur", "Lalmonirhat", "Madaripur",
    "Magura", "Manikganj", "Meherpur", "Moulvibazar", "Munshiganj", "Mymensingh", "Naogaon", "Narail", "Narayanganj",
    "Narsingdi", "Natore", "Netrokona", "Nilphamari", "Noakhali", "Pabna", "Panchagarh", "Patuakhali", "Pirojpur",
    "Rajbari", "Rajshahi", "Rangamati", "Rangpur", "Satkhira", "Shariatpur", "Sherpur", "Sirajganj", "Sunamganj",
    "Sylhet", "Tangail", "Thakurgaon"
];

const ConfirmOrder = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const { user } = useAuth();
    const axiosSecure = useAxiosSecure();

    const [isProcessing, setIsProcessing] = useState(false);
    const [formData, setFormData] = useState({
        name: "",
        email: "",
        contactNumber: "",
        paymentMethod: "",
        transactionId: "",
        senderNumber: "",
        district: "",
        thana: "",
        fullAddress: "",
        quantity: 1,
    });

    useEffect(() => {
        if (user) {
            setFormData((prev) => ({
                ...prev,
                name: user.displayName || "",
                email: user.email || "",
            }));
        }
    }, [user]);

    const { data: product, isLoading, error } = useQuery({
        queryKey: ["product", id],
        queryFn: async () => {
            const { data } = await axios.get(`https://gadgetzworld-server.vercel.app/product/${id}`);
            return data;
        },
    });

    if (isLoading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <span className="loading loading-bars loading-xl text-[#ef8220]"></span>
            </div>
        );
    }
    if (error) return <div className="text-center mt-10 text-red-600">‡¶™‡¶£‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§</div>;

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const increaseQuantity = () => {
        if (formData.quantity < product.quantity) {
            setFormData((prev) => ({ ...prev, quantity: prev.quantity + 1 }));
        } else {
            toast.warning(`‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ${product.quantity}‡¶ü‡¶ø ‡¶™‡¶£‡ßç‡¶Ø ‡¶∞‡ßü‡ßá‡¶õ‡ßá`, { position: "top-center" });
        }
    };

    const decreaseQuantity = () => {
        if (formData.quantity > 1) {
            setFormData((prev) => ({ ...prev, quantity: prev.quantity - 1 }));
        }
    };

    const handleConfirmPurchase = async (e) => {
        e.preventDefault();
        setIsProcessing(true);

        try {
            const now = new Date();
            const date = now.toLocaleDateString('en-GB');
            const time = now.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true,
            });
            const formattedDateTime = `${date} ${time}`;

            const selectedQuantity = formData.quantity;

            const orderData = {
                productId: product._id,
                productName: product.productName,
                productImage: product.images?.[0],
                unitPrice: product.totalPrice,
                quantity: selectedQuantity,
                totalPrice: product.totalPrice * selectedQuantity,
                paymentMethod: formData.paymentMethod,
                transactionId: formData.transactionId,
                senderNumber: formData.senderNumber,
                customer: {
                    name: formData.name,
                    email: formData.email,
                    phone: formData.contactNumber,
                    district: formData.district,
                    thana: formData.thana,
                    fullAddress: formData.fullAddress,
                },
                orderDate: formattedDateTime,
                status: "pending",
            };

            // ‚úÖ Step 1: Order Save
            const res = await axiosSecure.post("/orders", orderData);

            if (res.data.insertedId || res.data.acknowledged) {
                // ‚úÖ Step 2: Reduce Product Quantity (stock)
                await axiosSecure.patch(`/products/quantity/${product._id}`, {
                    quantityToUpdate: selectedQuantity, // Must be number
                    status: "decrease"
                });


                toast.success("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
                navigate("/");
            } else {
                toast.error("‚ùå ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
            }
        } catch (err) {
            console.error(err);
            toast.error("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        } finally {
            setIsProcessing(false);
        }
    };


    return (
        <div className="max-w-6xl mx-auto px-4 mt-4 py-6 bg-white  text-black">
            <h1 className="text-3xl font-bold mb-8 text-center text-gray-500">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®</h1>

            <div className="flex flex-col lg:flex-row gap-8">
                {/* Product Info */}
                <div className="w-full lg:w-1/3 p-4 bg-gray-100 rounded shadow">
                    <h2 className="text-xl font-semibold mb-4">{product.productName}</h2>
                    <div className="flex justify-between mb-2"><span className="font-semibold">‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø:</span><span>‡ß≥{product.totalPrice?.toLocaleString()}</span></div>
                    <div className="flex justify-between mb-2"><span className="font-semibold">‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶Ü‡¶õ‡ßá:</span><span>{product.quantity}</span></div>

                    {product.bkashNumber && (
                        <div className="flex justify-between items-center mb-2">
                            <span className="font-semibold flex items-center gap-2"><img src={bkashIcon} alt="Bkash" className="h-6" /> ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:</span>
                            <span className="flex items-center gap-2">
                                {product.bkashNumber}
                                <button onClick={() => {
                                    navigator.clipboard.writeText(product.bkashNumber);
                                    toast.success("Bkash ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
                                }} className="text-gray-500 hover:text-green-600"><FaRegCopy /></button>
                            </span>
                        </div>
                    )}

                    {product.nagadNumber && (
                        <div className="flex justify-between items-center mb-2">
                            <span className="font-semibold flex items-center gap-2"><img src={NagadIcon} alt="Nagad" className="h-6" /> ‡¶®‡¶ó‡¶¶ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:</span>
                            <span className="flex items-center gap-2">
                                {product.nagadNumber}
                                <button onClick={() => {
                                    navigator.clipboard.writeText(product.nagadNumber);
                                    toast.success("Nagad ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
                                }} className="text-gray-500 hover:text-green-600"><FaRegCopy /></button>
                            </span>
                        </div>
                    )}

                    <div className="my-4 p-4 bg-yellow-50 border-l-4 border-yellow-400 text-yellow-800 text-sm rounded leading-relaxed">
                        ‚ö†Ô∏è <strong>‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶°‡¶º‡ßÅ‡¶®:</strong><br /><br />
                        üöö <strong>‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ú‡ßá‡¶≤‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá:</strong> ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú <strong>‡ßÆ‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ</strong><br />
                        üöõ <strong>‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ú‡ßá‡¶≤‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá:</strong> ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú <strong>‡ßß‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ</strong><br /><br />
                        ‚úÖ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú <strong>Send Money</strong> ‡¶ï‡¶∞‡ßÅ‡¶®‡•§<br />
                        üí≥ <strong>Send Money</strong> ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§<br />
                        üßæ <strong>‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</strong> ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§<br /><br />
                        ‚ùó <strong>‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§</strong>
                    </div>

                    {/* Quantity */}
                    <div className="mt-4">
                        <label className="block font-semibold mb-1">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</label>
                        <div className="flex items-center gap-4">
                            <button type="button" onClick={decreaseQuantity} className="px-3 py-1 bg-gray-300 rounded text-xl"><FaMinus /></button>
                            <span className="text-lg font-semibold">{formData.quantity}</span>
                            <button type="button" onClick={increaseQuantity} className="px-3 py-1 bg-gray-300 rounded text-xl"><FaPlus /></button>
                        </div>
                    </div>

                    <div className="mt-4 flex justify-between font-semibold">
                        <span>‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ:</span>
                        <span>‡ß≥{(product.totalPrice * formData.quantity).toLocaleString()}</span>
                    </div>
                </div>

                {/* Form */}
                <form onSubmit={handleConfirmPurchase} className="w-full lg:w-2/3 space-y-5">
                    {/* Input fields with icons */}
                    {[
                        { label: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ", name: "name", icon: <FaUser />, type: "text", readOnly: true },
                        { label: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤", name: "email", icon: <FaEnvelope />, type: "email", readOnly: true },
                        { label: "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞", name: "contactNumber", icon: <FaMobileAlt />, type: "tel", placeholder: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞" },
                        { label: "‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", name: "transactionId", icon: <FaExchangeAlt />, type: "text", placeholder: "Bkash/Nagad ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ID" },
                        { label: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞", name: "senderNumber", icon: <FaMoneyCheckAlt />, type: "text", placeholder: "‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá" },
                        { label: "‡¶•‡¶æ‡¶®‡¶æ / ‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ", name: "thana", icon: <FaMapMarkerAlt />, type: "text", placeholder: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶•‡¶æ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ" },
                    ].map((field) => (
                        <div key={field.name}>
                            <label className="block font-semibold mb-1 flex items-center gap-2">{field.icon} {field.label}</label>
                            <input
                                name={field.name}
                                type={field.type}
                                value={formData[field.name]}
                                onChange={handleChange}
                                placeholder={field.placeholder}
                                required={!field.readOnly}
                                readOnly={field.readOnly}
                                className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                            />
                        </div>
                    ))}

                    {/* Payment Method */}
                    <div>
                        <label className="block font-semibold mb-1">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø</label>
                        <select
                            name="paymentMethod"
                            required
                            value={formData.paymentMethod}
                            onChange={handleChange}
                            className="w-full border border-gray-300 rounded px-3 py-2"
                        >
                            <option value="">-- ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® --</option>
                            {product.bkashNumber && <option value="bkash">‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂</option>}
                            {product.nagadNumber && <option value="nagad">‡¶®‡¶ó‡¶¶</option>}
                        </select>
                        {formData.paymentMethod === "bkash" && <img src={bkashIcon} alt="Bkash" className="h-10 mt-2" />}
                        {formData.paymentMethod === "nagad" && <img src={NagadIcon} alt="Nagad" className="h-10 mt-2" />}
                    </div>

                    {/* District */}
                    <div>
                        <label className="block font-semibold mb-1">‡¶ú‡ßá‡¶≤‡¶æ</label>
                        <select
                            name="district"
                            required
                            value={formData.district}
                            onChange={handleChange}
                            className="w-full border border-gray-300 rounded px-3 py-2"
                        >
                            <option value="">-- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßá‡¶≤‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® --</option>
                            {districts.map((dist) => (
                                <option key={dist} value={dist}>{dist}</option>
                            ))}
                        </select>
                    </div>

                    {/* Full Address */}
                    <div>
                        <label className="block font-semibold mb-1">‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ</label>
                        <textarea
                            name="fullAddress"
                            required
                            rows={3}
                            placeholder="‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶¨‡¶æ‡ßú‡¶ø-‡ßß‡ß®‡ß©, ‡¶∞‡ßã‡¶°-‡ß™, ‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø, ‡¶¢‡¶æ‡¶ï‡¶æ-‡ßß‡ß®‡ß¶‡ß´"
                            value={formData.fullAddress}
                            onChange={handleChange}
                            className="w-full border border-gray-300 rounded px-3 py-2"
                        />
                    </div>

                    <button
                        type="submit"
                        disabled={isProcessing}
                        className="w-full bg-[#ef8220] text-white py-3 rounded-lg font-semibold hover:bg-[#ef8318d1] transition flex items-center justify-center gap-2"
                    >
                        {isProcessing ? (
                            <>
                                <span className="loading loading-infinity loading-sm text-white"></span>
                                ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                            </>
                        ) : (
                            "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®"
                        )}
                    </button>

                </form>
            </div>
        </div>
    );
};

export default ConfirmOrder;
